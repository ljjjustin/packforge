#!/bin/bash

# Sanitize language settings to avoid commands bailing out
# with "unsupported locale setting" errors.
unset LANG
unset LANGUAGE
LC_ALL=C
export LC_ALL

# Make sure umask is sane
umask 022

# Keep track of the top directory
TOPDIR=$(cd $(dirname "$0") && pwd)

# Load all libs
source ${TOPDIR}/libs/common
source ${TOPDIR}/libs/msg


## show usage info
usage () {
    echo "USAGE: $0 [OPTIONS] <build|clean> <all|project name>"
    echo ""
    echo "Avaible OPTIONS:"
    echo "  -s, --strategy <tag|commit> Use to controll how we generate source code tarball"
    echo "                               * tag: generate source code tarball by tag,"
    echo "                                      this is used to build production packages"
    echo "                                      and this is the default strategy"
    echo "                               * commit: generate source code until the latest commit"
    echo "                                         in the branch specified by -b option, "
    echo "                                         this is used to build develop packages."
    echo "  -b, --branch <branch>       Use which branch to build source code tarball."
    echo "                               take action only if you have set GITURL in project CONFIG file"
    echo "  -w, --workers <count>       Fork multiple worker to build packages."
    echo "                                take action only if you want to build all projects"
    echo "  -h, --help                  Show this help message."
    echo ""
    exit
}


## parse cli arguments
parse_options() {
    args=$(getopt -o w:b:h -l workers:,branch:,help -- "$@")

    if [ $? -ne 0 ]; then
        usage >&2
    fi
    eval set -- "${args}"

    while true
    do
        case $1 in
            -s|--strategy)
                strategy=$2
                shift 2
                ;;
            -b|--branch)
                branch=$2
                shift 2
                ;;
            -w|--workers)
                workers=$2
                shift 2
                ;;
            -h|--help)
                usage
                ;;
            --)
                shift
                break
                ;;
            *)
                usage
                ;;
        esac
    done
    if [ $# -ne 2 ]; then
        usage
    fi
    command=$1
    project=$2
}


## check if command is avalible
is_valid_command() {
    local command=$1
    local avalible_commands=("build" "clean")

    for val in ${avalible_commands[@]}; do
        if [[ "${val}" == "${command}" ]]; then
            return 0
        fi
    done
    return 1
}


## check if project is avalible
is_valid_project() {
    local project=$1

    if [[ "all" == "${project}" ]]; then
        return 0
    fi

    local avalible_projects=( $(ls ${TOPDIR}/projects) )
    for val in ${avalible_projects[@]}; do
        if [[ "${val}" == "${project}" ]]; then
            return 0
        fi
    done
    return 1
}


## check if strategy is avalible
is_valid_strategy() {
    local strategy=$1
    local avalible_strategies=("tag" "commit")

    for val in ${avalible_strategies[@]}; do
        if [[ "${val}" == "${strategy}" ]]; then
            return 0
        fi
    done
    return 1
}
## cleanup before exit
cleanup_on_exit() {
    exit_code=$?

    # check exit code
    rm -f ${lockfile}
    exit ${exit_code}
}


# Parse options
workers=0
command=''
project=''
branch='master'
strategy='tag'
parse_options $@


# Validate command and project name
is_valid_command ${command} || usage
is_valid_project ${project} || usage
is_valid_strategy ${strategy} || usage


# Build package
lockfile="/tmp/packforge/${project}.lock"
[ -f ${lockfile} ] && { info "Project is under building, exit..."; exit 0; }
mkdir -p /tmp/packforge && touch ${lockfile}

trap "cleanup_on_exit" EXIT

if [[ "all" == "${project}" ]]; then
    build_all_projects "${branch}" "${strategy}"
else
    build_one_project "${project}" "${branch}" "${strategy}"
fi
