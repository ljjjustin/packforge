# libs/common
#
# Common functions.
#
# Author: Jiajun Liu <jiajun@unitedstack.com>
#
source ${TOPDIR}/libs/git
source ${TOPDIR}/libs/rpm


# Create project source code tarball
# create_source_code_tarball project
create_source_code_tarball() {
    local project=$1
    local type=${TYPE:-script}

    case $type in
        python)
            create_python_src_tarball ${project}
            ;;
        script)
            create_script_src_tarball ${project}
            ;;
        *)
            error "NOT supported package type: ${type}"
            exit
            ;;
    esac
}


# Build one project's all packages
build_one_project() {
    local project=$1
    local branch=${2:-master}
    local strategy=${3:-commit}

    prodir="${TOPDIR}/projects/${project}"
    config="${TOPDIR}/projects/${project}/CONFIG"
    srcdir="${TOPDIR}/projects/${project}/SRC"
    ## Change work directory
    pushd "${prodir}" > /dev/null
    if [ -r "${config}" ]; then
        source "${config}"
    fi
    ## Step 1: get source code tarball
    if [ -n "${GITURL}" ]; then
        info "Fetching source code from git repository..."
        if [ ! -d "${srcdir}" ]; then
            mkdir -p "${srcdir}"
        fi
        pushd "${srcdir}" > /dev/null
        if [ ! -d ".git" ]; then
            git_clone "${GITURL}" .
        fi
        git_fetch_tags
        git_fetch_code
        popd > /dev/null
    fi
    #create_source_code_tarball "${project}"
    ## Step 2: get latest spec files
    #
    ## Step 3: build packages with rpmbuild
    for spec in $(ls *.spec)
    do
        info "Building project according to ${spec}..."
    done
    ## Step 4: upload packages to repository
    #
    ## Step 5: clean project
    popd > /dev/null
}
